from telebot import types

import config
import db_functions


def action_keyboard():
    """Generates main keyboard that have option of filling form, check instagram."""

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–•–æ—á—É!', callback_data = 'yes'))
    keyboard.add(types.InlineKeyboardButton('–ù–µ—Ç', callback_data = 'no'))

    return keyboard


def ready_keyboard():
    """Generates main keyboard that have option of filling form, check instagram."""

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ì–æ—Ç–æ–≤(-–∞) –∑–∞–∫–∞–∑–∞—Ç—å!', callback_data = 'ready'))

    return keyboard


def username_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ!', callback_data = 'username'))

    return keyboard


def products_keyboard(user_id, products_for_select, products):
    keyboard = types.InlineKeyboardMarkup()
    users_products = eval(db_functions.get_users_field_info(user_id, 'products'))

    for num, product in enumerate(products_for_select):
        other_products = list(dict(products).keys())
        other_products.remove(product[0])
        
        if product[1] in users_products:
            keyboard.add(types.InlineKeyboardButton(f'‚úÖ {num + 1}. {product[1]}', callback_data = f'product_1_{product[0]}_{other_products[0]}_{other_products[1]}'))
        else:
            keyboard.add(types.InlineKeyboardButton(f'{num + 1}. {product[1]}', callback_data = f'product_0_{product[0]}_{other_products[0]}_{other_products[1]}'))
    
    other_products = list(dict(products).keys())
    keyboard.add(types.InlineKeyboardButton('–ì–æ—Ç–æ–≤–æ!', callback_data = f'done_{other_products[0]}_{other_products[1]}_{other_products[2]}'))

    return keyboard


def received_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ü–æ–ª—É—á–µ–Ω–æ!', callback_data = 'received'))

    return keyboard


def payment_method_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–°–ë–ü (–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞)', callback_data = 'method_sbp'))
    keyboard.add(types.InlineKeyboardButton('–ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã', callback_data = 'method_card'))

    return keyboard


def banks_keyboard():
    keyboard = types.InlineKeyboardMarkup()

    sber = types.InlineKeyboardButton('–°–±–µ—Ä', callback_data = 'bank_sber')
    tinkoff = types.InlineKeyboardButton('–¢–∏–Ω—å–∫–æ—Ñ—Ñ', callback_data = 'bank_tinkoff')
    vtb = types.InlineKeyboardButton('–í–¢–ë', callback_data = 'bank_vtb')
    open = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç–∏–µ', callback_data = 'bank_open')
    
    keyboard.add(sber, tinkoff)
    keyboard.add(vtb, open)

    keyboard.add(types.InlineKeyboardButton('–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫', callback_data = 'bank_alfa'))
    keyboard.add(types.InlineKeyboardButton('–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω –ë–∞–Ω–∫', callback_data = 'bank_raif'))

    keyboard.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data = 'back_method'))
    
    return keyboard


def confirm_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data = 'confirm'))
    keyboard.add(types.InlineKeyboardButton('üîÅ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ', callback_data = 'reenter'))

    return keyboard


def update_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('üîÑ –ü–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data = 'update'))

    return keyboard


def help_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–î–∞', callback_data = 'help_yes'), types.InlineKeyboardButton('–ù–µ—Ç', callback_data = 'help_no'))

    return keyboard
